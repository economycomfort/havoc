#!/usr/bin/env bash

playbookdir="./havoc-playbooks"
havocdir="${HOME}/.havoc/"

while getopts "acd:e:p:r:su:" flag; do
    if [ ${SUDO_USER} ]; then
        echo ""
        echo "This program should not be executed with sudo. Please re-run again without sudo."
        echo "Alternatively, if you desire to deploy your ./HAVOC campaign from the root account,"
        echo "'su -' to root first, clone the repository as root and then run the program from there."
        echo "Bye."
        echo ""
        exit 1
    fi
    case "${flag}" in
        a)
          # Add a new credential profile to the local config.
          if [ ! -f ~/.havoc/config ]; then
            echo "Could not find a local config file. Run ./havoc -d or ./havoc -s."
            exit
          fi
          echo ""
          echo "Creating a new credential profile..."
          while [ ! ${deploy_profile} ]; do
            read -p "./HAVOC credential profile name [default]: " deploy_profile
            if [ ! "${deploy_profile}" ]; then
              deploy_profile=default
            fi
            profile_exists=$(cat ~/.havoc/config | sed -n "/\[${deploy_profile}\]/p")
            if [ ${profile_exists} ]; then
              echo "Profile ${deploy_profile} already exists."
              unset deploy_profile
            fi
          done
          printf "\n[${deploy_profile}]\n" >> ~/.havoc/config
          read -p "Campaign ID: " campaign_id && echo "CAMPAIGN_ID = ${campaign_id}" >> ~/.havoc/config
          read -p "API domain name: " api_domain_name && echo "API_DOMAIN_NAME = ${api_domain_name}" >> ~/.havoc/config
          read -p "API region: " api_region && echo "API_REGION = ${api_region}" >> ~/.havoc/config
          read -p "API key: " api_key && echo "API_KEY = ${api_key}" >> ~/.havoc/config
          read -p "Secret: " secret && echo "SECRET = ${secret}" >> ~/.havoc/config
          read -p "Campaign admin email: " adm_email && echo "CAMPAIGN_ADMIN_EMAIL = ${adm_email}" >> ~/.havoc/config
          read -p "Output format (table|json) [table]: " output
          if [ ! "${output}" ]; then
              output=table
            fi
          echo "OUTPUT = ${output}" >> ~/.havoc/config
          echo "Done."
          exit
          ;;
        
        c) 
          ### Configure a ./havoc playbook
          set -e  # exit on any error

          # Check to see if ./havoc has been configured.
          if [ ! -d ./venv ]; then
            echo "[ERROR] ./venv not found. Run '$0 -d' or '$0 -s' first."
            echo "Exiting."
            exit 1
          fi
          
          # A few variables
          python3_bin=./venv/bin/python3
          pip_bin=./venv/bin/pip3
          
          # Check that havoc python module is installed.
          if ! ${pip_bin} --disable-pip-version-check list 2>&1 | grep -q '^havoc'; then
            echo "[ERROR] ./havoc python module not found. Run ./havoc -d or ./havoc -s."
            echo "Exiting."
            exit 1
          fi
          
          # Make a menu from available playbooks in $playbookdir.
          # Defines $playbook moving forward.
          echo ""
          PS3="Select a playbook to configure: "
          cd ${playbookdir}
          array=(*/)
          select playbook in "${array[@]%/}"; do
            echo "Configuring playbook ${playbook}."
            break
          done
          cd ..

          playbookini="${playbookdir}/${playbook}/${playbook}.ini"
          sampleini="${playbookdir}/${playbook}/${playbook}.ini.sample"
          tmpini="${playbookdir}/${playbook}/${playbook}.ini.tmp"

          # Checks for playbook requirements.txt.
          if [ ! -f "${playbookdir}/${playbook}/requirements.txt" ]; then
            echo "[ERROR] Could not find ${playbook} in ${playbookdir}.  Re-clone the repo?"
            echo "Exiting."
            exit 1
          fi

          # Checks for playbook sample ini file.
          if [ ! -f ${sampleini} ]; then
            echo "[ERROR] Could not find ${playbook}.ini.sample in ${playbookdir}/${playbook}."
            echo "Exiting."
            exit 1
          fi

          echo ""
          echo "If you have previously configured this playbook, configuring it again will delete the existing configuration."
          read -p "Are you sure you want to continue? [Y/N]: " user_continue
          if [[ ! ${user_continue} == y* ]] && [[ ! ${user_continue} == Y* ]]; then
            echo "Bye."
            exit 1
          fi
          echo ""
          echo "Creating a customized ${playbook}.ini file."
          echo "Provide a value for each parameter."
          echo "Press enter without providing a value to accept the default."

          # Determines number of lines in $sampleini.
          # Checks for presence of $playbookini.
          # If $playbookini is present:
          #   - moves $playbookini to $tmpini
          #   - determines number of lines in $tmpini
          #   - compares line count to $samplelines.
          #     - If they match, $playbookini is used as $input.
          #     - If they do not match, $sampleini is used as $input.
          # If $playbookini is not present, $sampleini is used as $input.
          # This process prevents corrupted playbook ini files, usually from premature exit.
          samplelines=$( wc -l ${sampleini} | awk '{print $1}' )
          if [ -f ${playbookini} ]; then
            mv ${playbookini} ${tmpini}
            inilines=$( wc -l ${tmpini} | awk '{print $1}' )
            if [ $samplelines != $inilines ]; then # If line counts don't agree, use sample ini.
              echo "[INFO] ${playbook}.ini might be corrupted. Using ${playbook}.ini.sample instead."
              input=${sampleini}
            else # If line counts match, proceed with tmp file as ini.
              input=${tmpini}
            fi
          else # If no playbook ini file, default to using $sampleini for $input.
            input=${sampleini}
          fi

          touch ${tmpini} # giggity
          
          # Begin writing new playbook ini file.  While loop reads in $input.
          while read -r line
          do
            # Write sample ini headers to new ini file
            if [[ ${line} == \[*\] ]]; then
              echo ""
              echo "${line}"
              echo "${line}" >> ${playbookini}
              continue
            fi
            
            # Write blank ini headers to new ini file 
            if [[ -z ${line} ]]; then
              echo "${line}" >> ${playbookini}
              continue
            fi

            # parameter = name of value
            # default_value = pre-populated value from $sampleini or previous $playbookini
            parameter=$(printf '%s\n' "${line}" | sed -rn 's/^(.*) =.*/\1/p')
            default_value=$(printf '%s\n' "${line}" | sed -rn 's/^.* = (.*)/\1/p')
            
            # Prompt for user input.  Use default value if nothing provided.
            read -p "${parameter} [${default_value}]: " user_response < /dev/tty
            if [[ -z ${user_response} ]]; then
              echo "${line}" >> ${playbookini}
            else
              echo "${parameter} = ${user_response}" >> ${playbookini}
            fi
          done < "${input}"

          # Clean up tmp file, if present (probably)
          if [ -f ${tmpini} ]; then
            rm ${tmpini}
          fi
          
          # Install playbook-dependent python modules
          ${pip_bin} -q install -r "${playbookdir}/${playbook}/requirements.txt"

          # Add playbook to ./havoc configured playbook list, if needed.
          if ! grep -Eq "^${playbook}" ${havocdir}/playbooks; then
            echo "${playbook}" >> ${havocdir}/playbooks
          fi
          
          echo
          echo "Playbook ${playbook} configured."
          exit 0
          ;;

        d)
          # Deploy a new campaign and configure the local environment.
          deploy=${OPTARG}
          tf_bin=$(which terraform)
          if [ ! "${tf_bin}" ]; then
            echo "Could not find terraform in your path. Please install terraform and/or add it to your path before continuing."
            exit
          fi
          python3_bin=$(which python3)
          if [ ! "${python3_bin}" ]; then
            echo "Could not find python3. Please install python3 before continuing."
            exit
          fi
          if [ ${deploy} == aws ]; then
            echo ""
            echo "Checking for an existing campaign deployment..."
            if [ -f havoc-deploy/aws/terraform/terraform.tfvars ]; then
              echo ""
              echo "Existing deployment found."
              echo "If you intend to re-deploy this ./HAVOC campaign, remove the existing deployment first by running ./havoc -r <provider>."
              echo "If you would like to deploy another campaign without destroying this one,"
              echo "clone the https://github.com/havocsh/havoc.git repo to a different directory and deploy from there."
              echo "Exiting..."
              exit
            fi
            echo "Deploying a new ./HAVOC campaign..."
            ${python3_bin} -m venv venv
            python3_bin=./venv/bin/python3
            pip_bin=./venv/bin/pip3
            touch havoc-deploy/aws/terraform/terraform.tfvars
            read -p "AWS region: " aws_region
            echo aws_region = \"${aws_region}\" >> havoc-deploy/aws/terraform/terraform.tfvars
            read -p "AWS profile: " aws_profile
            echo aws_profile = \"${aws_profile}\" >> havoc-deploy/aws/terraform/terraform.tfvars
            while [ ! ${campaign_name} ]; do
              read -p "./HAVOC campaign name: " campaign_name
              if [[ ${campaign_name} =~ ^[a-zA-Z0-9\-]{3,32}$ ]]; then
                echo campaign_name = \"${campaign_name}\" >> havoc-deploy/aws/terraform/terraform.tfvars
              else
                echo "campaign name must be DNS compliant (limited to letters, numbers and hyphens), minimum 3 characters and maximum 32 characters."
                unset campaign_name
              fi
            done
            read -p "./HAVOC campaign administrator email: " campaign_admin_email
            echo campaign_admin_email = \"${campaign_admin_email}\" >> havoc-deploy/aws/terraform/terraform.tfvars
            read -p "Task results queue expiration: " results_queue_expiration
            echo results_queue_expiration = ${results_queue_expiration} >> havoc-deploy/aws/terraform/terraform.tfvars
            read -p "Enable custom domain name? (Y/N): " enable_domain
            if [[ ${enable_domain} == y* ]] || [[ ${enable_domain} == Y* ]]; then
              echo enable_domain_name = true >> havoc-deploy/aws/terraform/terraform.tfvars
              read -p "Custom domain name: " custom_domain_name
              echo domain_name = \"${custom_domain_name}\" >> havoc-deploy/aws/terraform/terraform.tfvars
              read -p "Hosted zone ID: " hosted_zone
              echo hosted_zone = \"${hosted_zone}\" >> havoc-deploy/aws/terraform/terraform.tfvars
            else
              echo enable_domain_name = false >> havoc-deploy/aws/terraform/terraform.tfvars
            fi
            echo "Starting terraform tasks..."
            terraform -chdir=havoc-deploy/aws/terraform init
            tf_out=$(terraform -chdir=havoc-deploy/aws/terraform apply --auto-approve 2>&1) || echo ${tf_out} 1>&2
            if [[ ${tf_out} == *Error:* ]]; then
              echo ""
              echo "Terraform deployment encountered errors, rolling back changes..."
              terraform -chdir=havoc-deploy/aws/terraform destroy --auto-approve
              rm havoc-deploy/aws/terraform/terraform.tfvars
              rm havoc-deploy/aws/terraform/terraform.tfstate
              echo ""
              echo "Rollback completed. Exiting..."
              exit
            fi
            if [ ! -f "./havoc-deploy/aws/terraform/terraform.tfstate" ]; then
              echo ""
              echo "Terraform deployment encountered errors, rolling back changes..."
              terraform -chdir=havoc-deploy/aws/terraform destroy --auto-approve
              rm havoc-deploy/aws/terraform/terraform.tfvars
              echo ""
              echo "Rollback completed. Exiting..."
              exit
            fi
            echo "Terraform tasks completed."
            if [ ! -d ~/.havoc ]; then
              mkdir ~/.havoc
            fi
            if [ ! -f ~/.havoc/config ]; then
              touch ~/.havoc/config
            fi
            if [ ! -f ~/.havoc/playbooks ]; then
              touch ~/.havoc/playbooks
            fi
            while [ ! ${deploy_profile} ]; do
              read -p "./HAVOC credential profile name [default]: " deploy_profile
              if [ ! "${deploy_profile}" ]; then
                deploy_profile=default
              fi
              profile_exists=$(cat ~/.havoc/config | sed -n "/\[${deploy_profile}\]/p")
              if [ ${profile_exists} ]; then
                echo "Profile ${deploy_profile} already exists."
                unset deploy_profile
              fi
            done
            printf "\n[${deploy_profile}]\n" >> ~/.havoc/config
            read -p "Output format (table|json) [table]: " output
            if [ ! "${output}" ]; then
              output=table
            fi
            echo OUTPUT = ${output} >> ~/.havoc/config
            api_domain_name=$(sed -rn '/"API_DOMAIN_NAME": \{/{n;p;}' havoc-deploy/aws/terraform/terraform.tfstate | sed -rn 's/"value": "(.*)",$/\1/p' | awk '{$1=$1;print}') && printf '%s\n' "API_DOMAIN_NAME = ${api_domain_name}" >> ~/.havoc/config
            api_key=$(sed -rn '/"API_KEY": \{/{n;p;}' havoc-deploy/aws/terraform/terraform.tfstate | sed -rn 's/"value": "(.*)",$/\1/p' | awk '{$1=$1;print}') && printf '%s\n' "API_KEY = ${api_key}" >> ~/.havoc/config
            secret=$(sed -rn '/"SECRET": \{/{n;p;}' havoc-deploy/aws/terraform/terraform.tfstate | sed -rn 's/"value": "(.*)",$/\1/p' | awk '{$1=$1;print}') && printf '%s\n' "SECRET = ${secret}" >> ~/.havoc/config
            api_region=$(sed -rn '/"API_REGION": \{/{n;p;}' havoc-deploy/aws/terraform/terraform.tfstate | sed -rn 's/"value": "(.*)",$/\1/p' | awk '{$1=$1;print}') && printf '%s\n' "API_REGION = ${api_region}" >> ~/.havoc/config
            campaign_admin_email=$(sed -rn '/"CAMPAIGN_ADMIN_EMAIL": \{/{n;p;}' havoc-deploy/aws/terraform/terraform.tfstate | sed -rn 's/"value": "(.*)",$/\1/p' | awk '{$1=$1;print}') && printf '%s\n' "CAMPAIGN_ADMIN_EMAIL = ${campaign_admin_email}" >> ~/.havoc/config
            campaign_id=$(sed -rn '/"CAMPAIGN_ID": \{/{n;p;}' havoc-deploy/aws/terraform/terraform.tfstate | sed -rn 's/"value": "(.*)",$/\1/p' | awk '{$1=$1;print}') && printf '%s\n' "CAMPAIGN_ID = ${campaign_id}" >> ~/.havoc/config
            ${pip_bin} install wheel
            ${pip_bin} install -r ./requirements.txt
            echo ""
            echo "The following campaign parameters have been written to your ~/.havoc/config file:"
            echo "[${deploy_profile}]"
            echo "OUTPUT = ${output}"
            echo "API_DOMAIN_NAME = ${api_domain_name}"
            echo "API_KEY = ${api_key}"
            echo "SECRET = ${secret}"
            echo "API_REGION =  ${api_region}"
            echo "CAMPAIGN_ADMIN_EMAIL = ${campaign_admin_email}"
            echo "CAMPAIGN_ID = ${campaign_id}"
            echo ""
            echo "Done."
            echo ""
            exit
          fi
          ;;
        e)
          # Execute a playbook and optionally pass a credential profile to use with the playbook.
          if [ ! -d ./venv ]; then
            echo "No virtualenv found. Run ./havoc -d or ./havoc -s first."
            exit
          fi
          python3_bin=./venv/bin/python3
          pip_bin=./venv/bin/pip3
          python_pkg=$(${pip_bin} --disable-pip-version-check list)
          havoc_exists=$(printf '%s\n' "${python_pkg}" | sed -n '/^havoc/p')
          if [ ! "${havoc_exists}" ]; then
            echo "havoc python module not found. Run ./havoc -d or ./havoc -s first."
            exit
          fi
          IFS=' ' read -r -a array <<< "${@}"
          playbook=${array[1]}
          profile=${array[2]}
          playbook_exists=$(cat ~/.havoc/playbooks | sed -n "/^${playbook}/p")
          if [ ! "${playbook_exists}" ]; then
            echo "Playbook ${playbook} is not configured. Exiting."
            exit
          fi
          if [ ! "${profile}" ]; then
            default_profile_exists=$(cat ~/.havoc/config | sed -n "/\[default\]/p")
            if [ ! "${default_profile_exists}" ]; then
              echo "No profile specified and default profile not present. Exiting..."
              exit
            else
              profile=default
            fi
          else
            profile_exists=$(cat ~/.havoc/config | sed -n "/\[${profile}\]/p")
            if [ ! "${profile_exists}" ]; then
              echo "Profile ${profile} not found in ~/.havoc/config. Exiting..."
              exit
            fi
          fi
          ${python3_bin} ./havoc-playbooks/${playbook}/${playbook}.py --profile ${profile}
          exit
          ;;
        p)
          # Run the interactive CLI with a specific credential profile.
          if [ ! -d ./venv ]; then
            echo "No virtualenv found. Run ./havoc -d or ./havoc -s first."
            exit
          fi
          python3_bin=./venv/bin/python3
          pip_bin=./venv/bin/pip3
          if [ ! -f ~/.havoc/config ]; then
            echo "Could not find a local config file. Run ./havoc -d or ./havoc -s first."
            exit
          fi
          python_pkg=$(${pip_bin} --disable-pip-version-check list)
          havoc_exists=$(printf '%s\n' "${python_pkg}" | sed -n '/^havoc/p')
          if [ ! "${havoc_exists}" ]; then
            echo "havoc python module not found. Run ./havoc -d or ./havoc -s first."
            exit
          fi
          profile=${OPTARG}
          ${python3_bin} ./havoc_cli.py --profile ${profile}
          exit
          ;;
        r)
          # Destroy an existing campaign; this will not destroy the local environment or remove any local credentials.
          tf_bin=$(which terraform)
          if [ ! "${tf_bin}" ]; then
            echo "Could not find terraform in your path. Please install terraform and/or add it to your path before continuing."
            exit
          fi
          if [ -f havoc-deploy/aws/terraform/terraform.tfvars ]; then
            tf_vars=true
          else
            tf_vars=false
          fi
          if [ -f havoc-deploy/aws/terraform/terraform.tfstate ]; then
            tf_state=true
          else
            tf_state=false
          fi
          if [ "${tf_vars}" != true ] && [ "${tf_state}" != true ]; then
            echo "Could not find an existing campaign to destroy. Exiting..."
            exit
          fi
          deploy=${OPTARG}
          if [ ${deploy} == aws ]; then
            read -p "Are you sure you want to destroy your ./HAVOC campaign deployment? (Y/N) [N]: " destroy
            if [[ ${destroy} == y* ]] || [[ ${destroy} == Y* ]]; then
              echo "Destroying ./HAVOC campaign"
              if [ "${tf_state}" == true ]; then
                tf_out=$(terraform -chdir=havoc-deploy/aws/terraform destroy --auto-approve 2>&1) || echo ${tf_out} 1>&2
                if [[ ${tf_out} == *Error:* ]]; then
                  echo ""
                  echo "Terraform encountered errors while destroying deployment. Clean up reported conflicts and run ./havoc -r <provider> again. Exiting..."
                  exit
                fi
                rm havoc-deploy/aws/terraform/terraform.tfvars
                rm havoc-deploy/aws/terraform/terraform.tfstate
                echo "Done."
              fi
              if [ "${tf_vars}" == true ] && [ "${tf_state}" != true ]; then
                echo ""
                echo "Incomplete ./HAVOC campaign deployment found. Cleaning it up..."
                rm havoc-deploy/aws/terraform/terraform.tfvars
                echo "Done."
              fi
            fi
          else
            echo "Only aws deployment types are currently supported."
          fi
          exit
          ;;
        s)
          # Setup the local environment without deploying a new campaign.
          python3_bin=$(which python3)
          if [ ! "${python3_bin}" ]; then
            echo "Could not find python3 in your path. Please install python3 and/or add it to your path before continuing."
            exit
          fi
          echo ""
          echo "Setting up local environment..."
          ${python3_bin} -m venv venv
          python3_bin=./venv/bin/python3
          pip_bin=./venv/bin/pip3
          ${pip_bin} install wheel
          ${pip_bin} install -r ./requirements.txt
          for d in ./havoc-playbooks/*/ ; do
            ${pip_bin} install -r "${d}/requirements.txt"
          done
          echo "Adding ./HAVOC config..."
          if [ ! -d ~/.havoc ]; then
            mkdir ~/.havoc
          fi
          if [ ! -f ~/.havoc/config ]; then
            touch ~/.havoc/config
          fi
          while [ ! ${deploy_profile} ]; do
            read -p "./HAVOC credential profile name [default]: " deploy_profile
            if [ ! "${deploy_profile}" ]; then
              deploy_profile=default
            fi
            profile_exists=$(cat ~/.havoc/config | sed -n "/\[${deploy_profile}\]/p")
            if [ ${profile_exists} ]; then
              echo "Profile ${deploy_profile} already exists."
              unset deploy_profile
            fi
          done
          printf "\n[${deploy_profile}]\n" >> ~/.havoc/config
          read -p "Campaign ID: " campaign_id && echo CAMPAIGN_ID = ${campaign_id} >> ~/.havoc/config
          read -p "API domain name: " api_domain_name && echo API_DOMAIN_NAME = ${api_domain_name} >> ~/.havoc/config
          read -p "API region: " api_region && echo API_REGION = ${api_region} >> ~/.havoc/config
          read -p "API key: " api_key && echo API_KEY = ${api_key} >> ~/.havoc/config
          read -p "Secret: " secret && echo SECRET = ${secret} >> ~/.havoc/config
          read -p "Campaign admin email: " adm_email && echo CAMPAIGN_ADMIN_EMAIL = ${adm_email} >> ~/.havoc/config
          read -p "Output format (table|json) [table]: " output
          if [ ! "${output}" ]; then
              output=table
            fi
          echo "OUTPUT = ${output}" >> ~/.havoc/config
          echo "Done."
          exit
          ;;
        u)
          # Update an existing campaign.
          tf_bin=$(which terraform)
          if [ ! "${tf_bin}" ]; then
            echo "Could not find terraform in your path. Please install terraform and/or add it to your path before continuing."
            exit
          fi
          if [ ! -d ./venv ]; then
            echo "No virtualenv found. Run ./havoc -d or ./havoc -s first."
            exit
          fi
          python3_bin=./venv/bin/python3
          pip_bin=./venv/bin/pip3
          deploy=${OPTARG}
          if [ ${deploy} == aws ]; then
            echo ""
            echo "Getting updates..."
            git pull origin main --recurse-submodules --force
            if [ -f havoc-deploy/aws/terraform/terraform.tfstate ]; then
              echo "Found existing campaign. Applying terraform updates..."
              tf_out=$(terraform -chdir=havoc-deploy/aws/terraform apply --auto-approve 2>&1) || echo ${tf_out} 1>&2
            else
              echo "No existing campaign found. Skipping terraform updates."
            fi
            echo "Updating the local environment..."
            ${pip_bin} install -r ./requirements.txt
            ${pip_bin} install --upgrade havoc
            echo "Update complete"
          else
            echo "Only aws deployment types are currently supported"
          fi
          exit
          ;;
    esac
done

if [ $# -eq 0 ]; then
  if [ ! -d ./venv ]; then
    echo "No virtualenv found. Run ./havoc -d or ./havoc -s first."
    exit
  fi
  python3_bin=./venv/bin/python3
  pip_bin=./venv/bin/pip3
  python_pkg=$(${pip_bin} --disable-pip-version-check list)
  havoc_exists=$(printf '%s\n' "${python_pkg}" | sed -n '/^havoc/p')
  if [ ! "${havoc_exists}" ]; then
    echo "havoc python module not found. Run ./havoc -d or ./havoc -s first."
    exit
  fi
  ${python3_bin} ./havoc_cli.py
fi
exit


